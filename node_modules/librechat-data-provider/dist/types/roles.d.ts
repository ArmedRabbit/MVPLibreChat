import { z } from 'zod';
/**
 * Enum for System Defined Roles
 */
export declare enum SystemRoles {
    /**
     * The Admin role
     */
    ADMIN = "ADMIN",
    /**
     * The default user role
     */
    USER = "USER"
}
/**
 * Enum for Permission Types
 */
export declare enum PermissionTypes {
    /**
     * Type for Prompt Permissions
     */
    PROMPTS = "PROMPTS",
    /**
     * Type for Bookmark Permissions
     */
    BOOKMARKS = "BOOKMARKS",
    /**
     * Type for Agent Permissions
     */
    AGENTS = "AGENTS",
    /**
     * Type for Multi-Conversation Permissions
     */
    MULTI_CONVO = "MULTI_CONVO"
}
/**
 * Enum for Role-Based Access Control Constants
 */
export declare enum Permissions {
    SHARED_GLOBAL = "SHARED_GLOBAL",
    USE = "USE",
    CREATE = "CREATE",
    UPDATE = "UPDATE",
    READ = "READ",
    READ_AUTHOR = "READ_AUTHOR",
    SHARE = "SHARE"
}
export declare const promptPermissionsSchema: z.ZodObject<{
    SHARED_GLOBAL: z.ZodDefault<z.ZodBoolean>;
    USE: z.ZodDefault<z.ZodBoolean>;
    CREATE: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    SHARED_GLOBAL: boolean;
    USE: boolean;
    CREATE: boolean;
}, {
    SHARED_GLOBAL?: boolean | undefined;
    USE?: boolean | undefined;
    CREATE?: boolean | undefined;
}>;
export declare const bookmarkPermissionsSchema: z.ZodObject<{
    USE: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    USE: boolean;
}, {
    USE?: boolean | undefined;
}>;
export declare const agentPermissionsSchema: z.ZodObject<{
    SHARED_GLOBAL: z.ZodDefault<z.ZodBoolean>;
    USE: z.ZodDefault<z.ZodBoolean>;
    CREATE: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    SHARED_GLOBAL: boolean;
    USE: boolean;
    CREATE: boolean;
}, {
    SHARED_GLOBAL?: boolean | undefined;
    USE?: boolean | undefined;
    CREATE?: boolean | undefined;
}>;
export declare const multiConvoPermissionsSchema: z.ZodObject<{
    USE: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    USE: boolean;
}, {
    USE?: boolean | undefined;
}>;
export declare const roleSchema: z.ZodObject<{
    name: z.ZodString;
    PROMPTS: z.ZodObject<{
        SHARED_GLOBAL: z.ZodDefault<z.ZodBoolean>;
        USE: z.ZodDefault<z.ZodBoolean>;
        CREATE: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        SHARED_GLOBAL: boolean;
        USE: boolean;
        CREATE: boolean;
    }, {
        SHARED_GLOBAL?: boolean | undefined;
        USE?: boolean | undefined;
        CREATE?: boolean | undefined;
    }>;
    BOOKMARKS: z.ZodObject<{
        USE: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        USE: boolean;
    }, {
        USE?: boolean | undefined;
    }>;
    AGENTS: z.ZodObject<{
        SHARED_GLOBAL: z.ZodDefault<z.ZodBoolean>;
        USE: z.ZodDefault<z.ZodBoolean>;
        CREATE: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        SHARED_GLOBAL: boolean;
        USE: boolean;
        CREATE: boolean;
    }, {
        SHARED_GLOBAL?: boolean | undefined;
        USE?: boolean | undefined;
        CREATE?: boolean | undefined;
    }>;
    MULTI_CONVO: z.ZodObject<{
        USE: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        USE: boolean;
    }, {
        USE?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    PROMPTS: {
        SHARED_GLOBAL: boolean;
        USE: boolean;
        CREATE: boolean;
    };
    BOOKMARKS: {
        USE: boolean;
    };
    AGENTS: {
        SHARED_GLOBAL: boolean;
        USE: boolean;
        CREATE: boolean;
    };
    MULTI_CONVO: {
        USE: boolean;
    };
    name: string;
}, {
    PROMPTS: {
        SHARED_GLOBAL?: boolean | undefined;
        USE?: boolean | undefined;
        CREATE?: boolean | undefined;
    };
    BOOKMARKS: {
        USE?: boolean | undefined;
    };
    AGENTS: {
        SHARED_GLOBAL?: boolean | undefined;
        USE?: boolean | undefined;
        CREATE?: boolean | undefined;
    };
    MULTI_CONVO: {
        USE?: boolean | undefined;
    };
    name: string;
}>;
export type TRole = z.infer<typeof roleSchema>;
export type TAgentPermissions = z.infer<typeof agentPermissionsSchema>;
export type TPromptPermissions = z.infer<typeof promptPermissionsSchema>;
export type TBookmarkPermissions = z.infer<typeof bookmarkPermissionsSchema>;
export type TMultiConvoPermissions = z.infer<typeof multiConvoPermissionsSchema>;
export declare const roleDefaults: {
    ADMIN: {
        PROMPTS: {
            SHARED_GLOBAL: boolean;
            USE: boolean;
            CREATE: boolean;
        };
        BOOKMARKS: {
            USE: boolean;
        };
        AGENTS: {
            SHARED_GLOBAL: boolean;
            USE: boolean;
            CREATE: boolean;
        };
        MULTI_CONVO: {
            USE: boolean;
        };
        name: SystemRoles.ADMIN;
    };
    USER: {
        PROMPTS: {
            SHARED_GLOBAL: boolean;
            USE: boolean;
            CREATE: boolean;
        };
        BOOKMARKS: {
            USE: boolean;
        };
        AGENTS: {
            SHARED_GLOBAL: boolean;
            USE: boolean;
            CREATE: boolean;
        };
        MULTI_CONVO: {
            USE: boolean;
        };
        name: SystemRoles.USER;
    };
};
